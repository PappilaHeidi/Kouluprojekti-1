import streamlit as st
import pandas as pd
import duckdb
import os

st.set_page_config(
    page_title = "S√§√§tietoa", 
    page_icon=":mostly_sunny:",
    layout = "wide"
)

@st.cache_data
def load_data(file_path):
    data = pd.read_csv(file_path)
    return data

def read_node(tbl:str, node_name:str, file: str):
    con = duckdb.connect(database=file)
    df = con.execute(f"SELECT * FROM {tbl} WHERE node_id = {node_name}").fetchdf()
    con.close()
    return df

# Lue asiakastiedot tietokannasta
file = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "..", "data", "duckdb.database"))
tbl = "Silver_SensorData"
node = "3200"
customer_data = read_node(tbl, node, file)

# Hae kuukaudet
def get_months(data):
    # Kuukausien nimet
    months_names = ["Tammikuu-2020", "Helmikuu", "Maaliskuu-2019", "Huhtikuu-2019", "Toukokuu-2019", "Kes√§kuu-2019", "Hein√§kuu-2019", "Elokuu-2019", "Syyskuu-2019", "Lokakuu-2019", "Marraskuu-2019", "Joulukuu-2019"]
    
    # Muunna numerot kuukausien nimiksi ja j√§rjest√§ ne
    data["Kuukausi"] = data["Kuukausi"].map(lambda x: months_names[x-1])
    return sorted(data["Kuukausi"].unique(), key=lambda x: months_names.index(x) if x != "Tammikuu-2020" else float("inf"))

# Sovelluksen p√§√§osa
def main():
    st.title(":mostly_sunny: S√§√§tieto historiaa :mostly_sunny:")
    
    st.markdown(""" **Valitsemalla "Kaikki p√§iv√§t" n√§et valitun kuukauden s√§√§n keskiarvot. Valitsemalla "Yksitt√§inen p√§iv√§" n√§et tietyn p√§iv√§n s√§√§tiedot.**
    """)

    # Lataa data
    file_path = "yhdistetty_s√§√§.csv"  # Korvaa tiedostonimi omalla CSV-tiedostonimell√§si
    data = load_data(file_path)

    # Muunna sarakkeet numeerisiksi
    numeric_columns = ['Ilman l√§mp√∂tila keskiarvo [¬∞C]', 'Suhteellinen kosteus keskiarvo [%]', 'Sadem√§√§r√§ keskiarvo [mm]', 'Lumensyvyys keskiarvo [cm]', 'Keskituulen nopeus keskiarvo [m/s]']
    data[numeric_columns] = data[numeric_columns].apply(pd.to_numeric, errors='coerce')

    # Hae kuukaudet dataframesta
    months = get_months(data)

    # Dropdown-valikko kuukausien valitsemiseksi
    selected_month = st.selectbox("Valitse kuukausi:", months)

    # Vaihtoehto kaikkien p√§ivien tai oman p√§iv√§n valitsemiseksi
    selection_option = st.sidebar.radio("Valitse: ", ("Kaikki p√§iv√§t", "Yksitt√§inen p√§iv√§"))

    if selection_option == "Kaikki p√§iv√§t":
        st.markdown(""" **T√§ll√§ sivulla on tarkoitus n√§ytt√§√§ valitun kuukauden asiakasm√§√§r√§, sek√§ saman kuukauden keskiarvot s√§√§st√§. T√§t√§ muokataan viel√§...**
        """)
        st.markdown("""*Sarakkeen "Lumensyvyys" tiedot j√§tet√§√§n pois niilt√§ kuukaisilta, joissa se on 0 tai alle dataframessa*""")
        # N√§yt√§ vain kuukauden kaikkien p√§ivien keskiarvot
        st.subheader(f"üìä {selected_month} s√§√§n keskiarvot: üìä")
        st.write(" ")
        month_data = data[data["Kuukausi"] == selected_month]
        month_data_numeric = month_data.select_dtypes(include=[float])
        month_mean = month_data_numeric.mean().round(2)

        st.write(f"L√§mp√∂tilan keskiarvo: {month_mean['Ilman l√§mp√∂tila keskiarvo [¬∞C]']} ¬∞C üå°Ô∏è")
        st.write(f"Suhteellisen kosteuden keskiarvo: {month_mean['Suhteellinen kosteus keskiarvo [%]']} % üíß")    
        # N√§yt√§ "Lumensyvyys keskiarvo [cm]" -sarake vain tammikuulle, maaliskuulle, joulukuulle ja marraskuulle
        if selected_month in ["Tammikuu-2019", "Maaliskuu-2019", "Joulukuu-2019", "Marraskuu-2019"]:
            st.write(f"Lumensyvyyden keskiarvo: {month_mean['Lumensyvyys keskiarvo [cm]']} cm ‚ùÑÔ∏è")   
        st.write(f"Keskituulen nopeuden keskiarvo: {month_mean['Keskituulen nopeus keskiarvo [m/s]']} m/s üå¨Ô∏è")
        st.write(f"**Sadem√§√§r√§n keskiarvo:** {month_mean['Sadem√§√§r√§ keskiarvo [mm]']} mm üåßÔ∏è")

    else:
        # N√§yt√§ yksitt√§isen p√§iv√§n tiedot
        st.markdown(""" **T√§ll√§ sivulla on tarkoitus n√§ytt√§√§ valitun p√§iv√§n asiakasm√§√§r√§, sek√§ saman p√§iv√§n s√§√§. T√§t√§ muokataan viel√§...**
        """)
        st.markdown("""*Sarakkeen "Lumensyvyys" tiedot j√§tet√§√§n pois niilt√§ tunneilta, joissa se on 0 tai alle dataframessa.*""")
        st.subheader("Yksitt√§isen p√§iv√§n s√§√§")
        # Hae p√§iv√§m√§√§r√§t valitussa kuukaudessa
        days = sorted(data[data["Kuukausi"] == selected_month]["P√§iv√§"].unique())
        selected_day = st.sidebar.selectbox("Valitse p√§iv√§:", days)  # N√§yt√§ valittu p√§iv√§
        selected_day_data = data[(data["Kuukausi"] == selected_month) & (data["P√§iv√§"] == selected_day)]
        
        # N√§yt√§ valitun p√§iv√§n s√§√§ klo 9-21 v√§lill√§
        with st.expander("S√§√§ kaupan aukioloaikoina"):
            selected_day_data_time = selected_day_data[
                (selected_day_data["Aika [Paikallinen aika]"] >= "09:00") & 
                (selected_day_data["Aika [Paikallinen aika]"] <= "21:00")
            ]
            for index, row in selected_day_data_time.iterrows():
                st.write(f"**{row['Aika [Paikallinen aika]']}**")
                st.write(f"L√§mp√∂tila: {row['Ilman l√§mp√∂tila keskiarvo [¬∞C]']} ¬∞C :thermometer:")
                st.write(f"Suhteellinen kosteus: {row['Suhteellinen kosteus keskiarvo [%]']} % :droplet:")
                lumensyvyys = float(row['Lumensyvyys keskiarvo [cm]'])
                if lumensyvyys > 0:
                    st.write(f"Lumensyvyys: {lumensyvyys} cm :snowflake:")
                st.write(f"Keskituulen nopeus: {row['Keskituulen nopeus keskiarvo [m/s]']} m/s :wind_blowing_face:")
                st.write(f"Sadem√§√§r√§: {row['Sadem√§√§r√§ keskiarvo [mm]']} mm :rain_cloud:")

if __name__ == "__main__":
    main()